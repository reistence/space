/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: m33ro (https://sketchfab.com/m33ro)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/simple-ufo-with-lights-533f12e402f2477cb438d4883144bba7
Title: Simple UFO with Lights
*/

import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { AmbientLight } from "three";
import { useSpring, animated } from "@react-spring/three";
import { useFrame, useThree } from "@react-three/fiber";
import { MovingSpot } from "./MovingSpot";
import { Vector3 } from "three";

export function Ufo2(props) {
  const { nodes, materials } = useGLTF("/simple_ufo_with_lights.glb");
  const [mousePos, setMousePos] = useState({ x: 0, y: 10 });
  const { camera, size, raycaster, pointer } = useThree();

  // console.log(props.currentPageValue);
  let vec = new Vector3();
  const { position } = useSpring({
    // rotation: active ? [0, 0, Math.PI / mousePos.y] : [0, 0, 0],
    position: [
      props.currentPageValue > 9 ? 3 : Math.round(pointer.x * 20),
      Math.max(Math.round(pointer.y * 10), -0.7),
      // Math.round(camera.position.z),
      props.currentPageValue < 9 ? 3 : Math.round(-pointer.x * 20),
    ],
  });
  const ufo = useRef();
  const viewport = useThree((state) => state.viewport);

  useFrame((state) => {
    ufo.current.position.lerp(
      vec.set(
        (state.mouse.x * viewport.width) / 2,
        Math.max((state.mouse.y * viewport.height) / 2, -0.7),
        props.currentPageValue < 9 ? 3 : (state.mouse.x * viewport.width) / 2
      ),
      0.015
    );

    // light.current.target.updateMatrixWorld();
  });

  // console.log(camera);
  // useLayoutEffect(() => {
  //   const handleMouseMove = (event) => {
  //     // setMousePos({ x: event.clientX, y: event.clientY });
  //     setMousePos({
  //       // mouseX: Math.round(pointer.x * 10) + 1,
  //       // mouseX: 0,
  //       // mouseY: 5,
  //     });
  //   };

  //   window.addEventListener("mousemove", handleMouseMove);

  //   return () => {
  //     window.removeEventListener("mousemove", handleMouseMove);
  //   };
  // }, []);
  // console.log(pointer.y * 10);

  return (
    <>
      <ambientLight intensity={0.5} color={"white"} />
      <animated.group
        {...props}
        scale={1}
        dispose={null}
        // position={[0, 3, 6]}
        // position={position}
        ref={ufo}
        // onPointerEnter={handleMouseMove}
        // rotation={rotation}
      >
        {/* <MovingSpot color="#f32828" position={(0, 10, 0)} /> */}
        <group rotation={[-Math.PI / 2, 0, 0]} scale={0.125}>
          <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
            <group
              position={[448.436, 789.431, -132.305]}
              rotation={[-2.046, 0.073, 2.451]}
              scale={234.157}
            >
              <group
                position={[0.77, 0, -0.113]}
                rotation={[Math.PI, 0.527, Math.PI]}
                scale={[0.074, 0.074, 0.048]}
              >
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes.Janelas001_Material001_0.geometry}
                  material={materials["Material.001"]}
                />
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes.Janelas001_Material001_0_1.geometry}
                  material={materials["Material.001"]}
                />
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes.Janelas001_Material001_0_2.geometry}
                  material={materials["Material.001"]}
                />
              </group>
              <mesh
                castShadow
                receiveShadow
                geometry={nodes["Det_04_-_Base001_Detalhes_UFO001_0"].geometry}
                material={materials["Detalhes_UFO.001"]}
                position={[0, 0, -0.195]}
                scale={1.02}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes["Det_03_-_Base001_Detalhes_UFO001_0"].geometry}
                material={materials["Detalhes_UFO.001"]}
                position={[0, 0, -0.288]}
                scale={0.926}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={
                  nodes["Det_02_-_C��pula001_Detalhes_UFO001_0"].geometry
                }
                material={materials["Detalhes_UFO.001"]}
                position={[0, 0, 0.377]}
                scale={0.643}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Det_01001_Detalhes_UFO001_0.geometry}
                material={materials["Detalhes_UFO.001"]}
                position={[0, 0, -0.01]}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Base_Form001_Material002_0.geometry}
                material={materials["Material.002"]}
              />
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Base_Form001_Vidro001_0.geometry}
                material={materials["Vidro.001"]}
              />
            </group>
          </group>
        </group>
      </animated.group>
    </>
  );
}

useGLTF.preload("/simple_ufo_with_lights.glb");
